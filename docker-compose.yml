services:
  nginx-proxy:
    image: nginxproxy/nginx-proxy:latest
    container_name: nginx-proxy
    restart: unless-stopped
    environment:
      DEFAULT_HOST: pihole.lan
    ports:
      - '80:80'
    volumes:
      - '/var/run/docker.sock:/tmp/docker.sock'
    networks:
      dns:
        ipv4_address: 172.30.0.5

#  nginx-proxy-manager:
#    image: jc21/nginx-proxy-manager:latest
#    container_name: nginx-proxy-manager
#    restart: unless-stopped
#    ports:
#      - "80:80"
#      - "443:443"
#      - "81:81"
#    volumes:
#      - ./config/npm:/data
#      - ./config/letsencrypt:/etc/letsencrypt
#    networks:
#      dns:
#        ipv4_address: 172.30.0.5

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    env_file:
      - .env
    environment:
      VIRTUAL_HOST: grafana.lan
      VIRTUAL_PORT: 3000
    ports:
      - 3000:3000
    volumes:
      #- grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    dns:
      - 172.30.0.3
      - 1.1.1.1
    networks:
      dns:
        ipv4_address: 172.30.0.6
    depends_on:
      - pihole
      - prometheus

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    env_file:
      - .env
    environment:
      VIRTUAL_HOST: prometheus.lan
      VIRTUAL_PORT: 9090
    #ports:
    #  - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - "--storage.tsdb.path=/prometheus"
      - "--config.file=/etc/prometheus/prometheus.yml"
    networks:
      dns:
        ipv4_address: 172.30.0.7
    depends_on:
      - cadvisor
      - node-exporter
      #- influxdb

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-explorer
    restart: unless-stopped
    #ports:
    #  - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /:/host:ro,rslave
    command:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --path.rootfs=/host
      - --collector.filesystem.ignored-mount-points
      - ^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)
    networks:
      dns:
        ipv4_address: 172.30.0.8

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    restart: unless-stopped
    #ports:
    #  - "8080:8080"
    command:
      - "-housekeeping_interval=15s"
      - "-docker_only=true"
      - "-store_container_labels=false"
    privileged: true
    devices:
      - /dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
      - /etc/machine-id:/etc/machine-id:ro
    networks:
      dns:
        ipv4_address: 172.30.0.9

  wg-easy:
    image: ghcr.io/wg-easy/wg-easy:latest
    container_name: wg-easy
    restart: unless-stopped
    env_file:
      - .env
    environment:
      VIRTUAL_HOST: wg.lan
      VIRTUAL_PORT: "${PORT}"
    ports:
      - "${WG_PORT}:${WG_PORT}/udp"
    #  - "${PORT}:${PORT}/tcp"
    volumes:
      - ./config/wireguard:/etc/wireguard
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    sysctls:
      - net.ipv4.ip_forward=1
      - net.ipv4.conf.all.src_valid_mark=1
    networks:
      dns:
        ipv4_address: 172.30.0.4

  pihole:
    image: pihole/pihole:latest
    container_name: pihole
    restart: unless-stopped
    env_file:
      - .env
    environment:
      FTLCONF_dns_upstreams: 172.30.0.2
      FTLCONF_dns_dnssec: true
      FTLCONF_dns_listeningMode: single
      VIRTUAL_HOST: pihole.lan
      VIRTUAL_PORT: 80
    extra_hosts:
      - "pihole pihole.lan:${FTLCONF_LOCAL_IPV4}"
      - "grafana grafana.lan:${FTLCONF_LOCAL_IPV4}"
      - "prometheus prometheus.lan:${FTLCONF_LOCAL_IPV4}"
      - "wireguard wg.lan:${FTLCONF_LOCAL_IPV4}"
      - "homeassistant homeassistant.lan:${FTLCONF_LOCAL_IPV4}"
      - "npm npm.lan:${FTLCONF_LOCAL_IPV4}"
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      # - "8053:80/tcp"
      # - "443:443/tcp"
    volumes:
      - pihole_data:/etc
    networks:
      dns:
        ipv4_address: 172.30.0.3
    dns:
      - 172.30.0.2
      - 1.1.1.1
    labels:
      - "com.centurylinklabs.watchtower.monitor-only=true"
    depends_on:
      - unbound
    deploy: #Remove it if you have Rpi 4 or better
      resources:
        limits:
          cpus: "0.50"

  unbound:
    image: mvance/unbound-rpi:latest
    container_name: unbound
    restart: unless-stopped
    # ports:
    #   - "5335:53/udp" #testing unbound only
    volumes:
      - ./unbound/forward-records.conf:/opt/unbound/etc/unbound/forward-records.conf
    networks:
      dns:
        ipv4_address: 172.30.0.2

  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    restart: unless-stopped
    env_file:
      - .env
    #ports:
    #  - "8081:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    dns:
      - 172.30.0.3
      - 1.1.1.1
    networks:
      dns:
        ipv4_address: 172.30.0.10

  home-assistant:
    container_name: home-assistant
    image: "ghcr.io/home-assistant/home-assistant:stable"
    restart: unless-stopped
    environment:
      VIRTUAL_HOST: homeassistant.lan
      VIRTUAL_PORT: 8123
    volumes:
      - ./config/home-assistant:/config
      - /etc/localtime:/etc/localtime:ro
      - /run/dbus:/run/dbus:ro
    privileged: true
    network_mode: host
    depends_on:
      pihole:
        condition: service_started
      grafana:
        condition: service_started
    deploy: #Remove it if you have Rpi 4 or better
      resources:
        limits:
          cpus: "1.0"
          memory: "512M"

#  duckdns:
#    image: lscr.io/linuxserver/duckdns:latest
#    container_name: duckdns
#    network_mode: host
#    env_file:
#      - .env
#    restart: unless-stopped

  ## optional
  # chronograf:
  #  image: chronograf:latest
  #  container_name: chronograf
  #  ports:
  #    - "8889:8888"
  #  depends_on:
  #    - influxdb

  # influxdb:
  # image: arm32v7/influxdb:latest
  # container_name: influxdb
  # restart: unless-stopped
  # ports:
  #   - "8086:8086"
  # env_file:
  #   - .env
  # volumes:
  #   - influxdb_data:/var/lib/influxdb
  # healthcheck:
  #   test: ["CMD", "curl", "-f", "http://influxdb:8086/ping"]
  #   interval: 30s
  #   timeout: 10s
  #   retries: 5

volumes:
  prometheus_data:
  #grafana_data:
  #influxdb_data:
  pihole_data:
networks:
  dns:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.30.0.0/24
