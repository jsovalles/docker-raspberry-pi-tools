services:
  nginx-proxy:
    image: nginxproxy/nginx-proxy:latest
    container_name: nginx-proxy
    ports:
      - '80:80'
    environment:
      DEFAULT_HOST: pihole.local
    volumes:
      - '/var/run/docker.sock:/tmp/docker.sock'
    networks:
      dns:
        ipv4_address: 172.30.0.5
    restart: always

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - 3000:3000
    env_file:
      - .env
    environment:
      VIRTUAL_HOST: grafana.local
      VIRTUAL_PORT: 3000
    volumes:
      #- grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      dns:
        ipv4_address: 172.30.0.6
    depends_on:
      - prometheus

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    env_file:
      - .env
    environment:
      VIRTUAL_HOST: prometheus.local
      VIRTUAL_PORT: 9090
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - "--storage.tsdb.path=/prometheus"
      - "--config.file=/etc/prometheus/prometheus.yml"
    networks:
      dns:
        ipv4_address: 172.30.0.7
    depends_on:
      - cadvisor
      - node-exporter
      #- influxdb

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-explorer
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /:/host:ro,rslave
    command:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --path.rootfs=/host
      - --collector.filesystem.ignored-mount-points
      - ^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)
    networks:
      dns:
        ipv4_address: 172.30.0.8

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    restart: unless-stopped
    ports:
      - "8080:8080"
    command:
      - "-housekeeping_interval=15s"
      - "-docker_only=true"
      - "-store_container_labels=false"
    privileged: true
    devices:
      - /dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
      - /etc/machine-id:/etc/machine-id:ro
    networks:
      dns:
        ipv4_address: 172.30.0.9

  wg-easy:
    env_file:
      - .env
    environment:
      VIRTUAL_HOST: wg.local
      VIRTUAL_PORT: "${PORT}"
    image: ghcr.io/wg-easy/wg-easy:latest
    container_name: wg-easy
    volumes:
      - etc_wireguard:/etc/wireguard
    ports:
      - "${WG_PORT}:${WG_PORT}/udp"
      - "${PORT}:${PORT}/tcp"
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    sysctls:
      - net.ipv4.ip_forward=1
      - net.ipv4.conf.all.src_valid_mark=1
    networks:
      dns:
        ipv4_address: 172.30.0.4

  pihole:
    image: pihole/pihole:latest
    container_name: pihole
    env_file:
      - .env
    environment:
      PIHOLE_DNS_: 172.30.0.2
      DNSSEC: true
      DNSMASQ_LISTENING: single
      VIRTUAL_HOST: pihole.local
      VIRTUAL_PORT: 80
    extra_hosts:
      - 'pihole pihole.local:${FTLCONF_LOCAL_IPV4}'
      - 'grafana grafana.local:${FTLCONF_LOCAL_IPV4}'
      - 'prometheus prometheus.local:${FTLCONF_LOCAL_IPV4}'
      - 'wireguard wg.local:${FTLCONF_LOCAL_IPV4}'
    volumes:
      - pihole_data:/etc
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "8053:80/tcp"
      - "443:443/tcp"
    networks:
      dns:
        ipv4_address: 172.30.0.3
    dns:
      - 172.30.0.2
      - 1.1.1.1
    restart: unless-stopped
    labels:
      - "com.centurylinklabs.watchtower.monitor-only=true"
    depends_on:
      - unbound

  unbound:
    image: mvance/unbound-rpi:latest
    container_name: unbound
    # ports:
    #   - "5335:53/udp" #testing unbound only
    volumes:
      - ./unbound/forward-records.conf:/opt/unbound/etc/unbound/forward-records.conf
    networks:
      dns:
        ipv4_address: 172.30.0.2
    restart: unless-stopped

  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    env_file:
      - .env
    ports:
      - "8081:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    networks:
      dns:
        ipv4_address: 172.30.0.10
  ## optional
  # chronograf:
  #  image: chronograf:latest
  #  container_name: chronograf
  #  ports:
  #    - "8889:8888"
  #  depends_on:
  #    - influxdb

  # influxdb:
  # image: arm32v7/influxdb:latest
  # container_name: influxdb
  # restart: unless-stopped
  # ports:
  #   - "8086:8086"
  # env_file:
  #   - .env
  # volumes:
  #   - influxdb_data:/var/lib/influxdb
  # healthcheck:
  #   test: ["CMD", "curl", "-f", "http://influxdb:8086/ping"]
  #   interval: 30s
  #   timeout: 10s
  #   retries: 5

volumes:
  prometheus_data:
  #grafana_data:
  #influxdb_data:
  etc_wireguard:
  pihole_data:
networks:
  dns:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.30.0.0/24
